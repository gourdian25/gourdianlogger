package gourdianlogger

import (
	"fmt"
	"io"
	"os"
	"strings"
	"sync"
	"testing"
	"time"
)

// BenchmarkLogging benchmarks basic synchronous logging
func BenchmarkLogging(b *testing.B) {
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("benchmark log message")
	}
}

// BenchmarkLoggingWithCaller benchmarks logging with caller info
func BenchmarkLoggingWithCaller(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.EnableCaller = true
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("benchmark log message with caller")
	}
}

// BenchmarkLoggingJSON benchmarks JSON formatted logging
func BenchmarkLoggingJSON(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.Format = FormatJSON
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("benchmark json log message")
	}
}

// BenchmarkLoggingJSONPretty benchmarks pretty-printed JSON logging
func BenchmarkLoggingJSONPretty(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.Format = FormatJSON
	config.FormatConfig.PrettyPrint = true
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("benchmark pretty json log message")
	}
}

// BenchmarkLoggingWithCustomFields benchmarks logging with custom fields
func BenchmarkLoggingWithCustomFields(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.FormatConfig.CustomFields = map[string]interface{}{
		"app":     "benchmark",
		"version": "1.0.0",
	}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("benchmark log with custom fields")
	}
}

// BenchmarkAsyncLogging benchmarks async logging with buffer
func BenchmarkAsyncLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.BufferSize = 1000
	config.AsyncWorkers = 4
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("async benchmark log message")
	}
	b.StopTimer()
	logger.Flush()
}

// BenchmarkAsyncLoggingHighContention benchmarks async logging under high contention
func BenchmarkAsyncLoggingHighContention(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.BufferSize = 100
	config.AsyncWorkers = 2 // Fewer workers to increase contention
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("high contention async log message")
	}
	b.StopTimer()
	logger.Flush()
}

// BenchmarkConcurrentLogging benchmarks concurrent log writes
func BenchmarkConcurrentLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.BufferSize = 1000
	config.AsyncWorkers = 4
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			logger.Info("concurrent benchmark log message")
		}
	})
	b.StopTimer()
	logger.Flush()
}

// BenchmarkLogRotation benchmarks log rotation performance
func BenchmarkLogRotation(b *testing.B) {
	dir := "bench_rotate"
	os.RemoveAll(dir)
	defer os.RemoveAll(dir)

	config := DefaultConfig()
	config.LogsDir = dir
	config.MaxBytes = 100 // Small size to force frequent rotation
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info(strings.Repeat("a", 50)) // Ensure rotation happens
	}
}

// BenchmarkMultiOutput benchmarks logging to multiple outputs
func BenchmarkMultiOutput(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard, io.Discard, io.Discard} // Multiple discard writers
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("multi-output benchmark log message")
	}
}

// BenchmarkFormattedLogging benchmarks formatted logging methods
func BenchmarkFormattedLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	tests := []struct {
		name string
		fn   func(string, ...interface{})
	}{
		{"Debugf", logger.Debugf},
		{"Infof", logger.Infof},
		{"Warnf", logger.Warnf},
		{"Errorf", logger.Errorf},
	}

	for _, tt := range tests {
		b.Run(tt.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				tt.fn("formatted log %d", i)
			}
		})
	}
}

// BenchmarkLogLevelFiltering benchmarks the impact of log level filtering
func BenchmarkLogLevelFiltering(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	tests := []struct {
		name  string
		level LogLevel
	}{
		{"DebugLevel", DEBUG},
		{"InfoLevel", INFO},
		{"WarnLevel", WARN},
		{"ErrorLevel", ERROR},
	}

	for _, tt := range tests {
		b.Run(tt.name, func(b *testing.B) {
			logger.SetLogLevel(tt.level)
			for i := 0; i < b.N; i++ {
				logger.Debug("debug message")
				logger.Info("info message")
				logger.Warn("warn message")
				logger.Error("error message")
			}
		})
	}
}

// BenchmarkHeavyLogContent benchmarks logging with large messages
func BenchmarkHeavyLogContent(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	largeMessage := strings.Repeat("This is a large log message. ", 100) // ~3KB

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info(largeMessage)
	}
}

// BenchmarkLoggerCreation benchmarks logger initialization
func BenchmarkLoggerCreation(b *testing.B) {
	dir := "bench_create"
	os.RemoveAll(dir)
	defer os.RemoveAll(dir)

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		config := DefaultConfig()
		config.LogsDir = dir
		logger, err := NewGourdianLogger(config)
		if err != nil {
			b.Fatal(err)
		}
		logger.Close()
	}
}

// BenchmarkWithConfig benchmarks JSON config parsing and logger creation
func BenchmarkWithConfig(b *testing.B) {
	dir := "bench_config"
	os.RemoveAll(dir)
	defer os.RemoveAll(dir)

	jsonConfig := `{
		"filename": "config_test",
		"logs_dir": "` + dir + `",
		"log_level": "WARN",
		"format": "JSON",
		"format_config": {
			"pretty_print": true,
			"custom_fields": {
				"app": "benchmark"
			}
		}
	}`

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger, err := WithConfig(jsonConfig)
		if err != nil {
			b.Fatal(err)
		}
		logger.Close()
	}
}

// BenchmarkLoggingWithManyOutputs benchmarks logging with many outputs
func BenchmarkLoggingWithManyOutputs(b *testing.B) {
	// Create 10 discard writers
	outputs := make([]io.Writer, 10)
	for i := range outputs {
		outputs[i] = io.Discard
	}

	config := DefaultConfig()
	config.Outputs = outputs
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("log message with many outputs")
	}
}

// BenchmarkLoggingUnderContention benchmarks logging under lock contention
func BenchmarkLoggingUnderContention(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	var wg sync.WaitGroup
	workers := 10
	iterations := b.N / workers
	if iterations == 0 {
		iterations = 1
	}

	b.ResetTimer()
	for w := 0; w < workers; w++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for i := 0; i < iterations; i++ {
				logger.Info("contention test message")
			}
		}()
	}
	wg.Wait()
}

func BenchmarkDifferentLogLevels(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	tests := []struct {
		name string
		fn   func(string)
	}{
		{"Debug", func(s string) { logger.Debug(s) }},
		{"Info", func(s string) { logger.Info(s) }},
		{"Warn", func(s string) { logger.Warn(s) }},
		{"Error", func(s string) { logger.Error(s) }},
	}

	for _, tt := range tests {
		b.Run(tt.name, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				tt.fn("log message")
			}
		})
	}
}

// BenchmarkStructuredLogging benchmarks structured logging with fields
func BenchmarkStructuredLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	fields := map[string]interface{}{
		"user_id":    12345,
		"action":     "login",
		"ip_address": "192.168.1.1",
		"success":    true,
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.InfoWithFields(fields, "user login")
	}
}

// BenchmarkConcurrentStructuredLogging benchmarks concurrent structured logging
func BenchmarkConcurrentStructuredLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.BufferSize = 1000
	config.AsyncWorkers = 4
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	fields := map[string]interface{}{
		"transaction_id": "tx-12345",
		"amount":         100.50,
		"currency":       "USD",
	}

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			logger.InfoWithFields(fields, "transaction processed")
		}
	})
	b.StopTimer()
	logger.Flush()
}

// BenchmarkLogLevelChange benchmarks the performance impact of changing log levels
func BenchmarkLogLevelChange(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// Change log level every 100 iterations
		if i%100 == 0 {
			logger.SetLogLevel(LogLevel(i % 5))
		}
		logger.Info("message with changing log levels")
	}
}

// BenchmarkDynamicLogLevel benchmarks dynamic log level function performance
func BenchmarkDynamicLogLevel(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	counter := 0
	logger.SetDynamicLevelFunc(func() LogLevel {
		counter++
		return LogLevel(counter % 5)
	})

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("message with dynamic level")
	}
}

// BenchmarkRateLimitedLogging benchmarks logging with rate limiting
func BenchmarkRateLimitedLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.MaxLogRate = 10000 // 10,000 logs per second
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("rate limited message")
	}
}

// BenchmarkSampledLogging benchmarks logging with sampling
func BenchmarkSampledLogging(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.SampleRate = 10 // Log 1 in 10 messages
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("sampled log message")
	}
}

// BenchmarkLogRotationWithCompression benchmarks rotation with compression
func BenchmarkLogRotationWithCompression(b *testing.B) {
	dir := "bench_rotate_compress"
	os.RemoveAll(dir)
	defer os.RemoveAll(dir)

	config := DefaultConfig()
	config.LogsDir = dir
	config.MaxBytes = 100 // Small size to force frequent rotation
	config.CompressBackups = true
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info(strings.Repeat("a", 50)) // Ensure rotation happens
	}
}

// BenchmarkOutputModification benchmarks adding/removing outputs
func BenchmarkOutputModification(b *testing.B) {
	config := DefaultConfig()
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	newOutput := io.Discard

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.AddOutput(newOutput)
		logger.RemoveOutput(newOutput)
	}
}

// BenchmarkErrorHandling benchmarks error handling path
func BenchmarkErrorHandling(b *testing.B) {
	// Create a faulty writer that will fail every write
	faultyWriter := &faultyWriter{failEvery: 1}
	config := DefaultConfig()
	config.Outputs = []io.Writer{faultyWriter}
	config.EnableFallback = true
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("message that will trigger error handling")
	}
}

// BenchmarkLoggerWithManyFields benchmarks logging with many fields
func BenchmarkLoggerWithManyFields(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	// Create a map with many fields
	manyFields := make(map[string]interface{})
	for i := 0; i < 50; i++ {
		manyFields[fmt.Sprintf("field_%d", i)] = fmt.Sprintf("value_%d", i)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.InfoWithFields(manyFields, "message with many fields")
	}
}

// BenchmarkConcurrentConfigChanges benchmarks concurrent config changes
func BenchmarkConcurrentConfigChanges(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	var wg sync.WaitGroup
	workers := 10
	iterations := b.N / workers
	if iterations == 0 {
		iterations = 1
	}

	b.ResetTimer()
	for w := 0; w < workers; w++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			for i := 0; i < iterations; i++ {
				// Alternate between logging and config changes
				if i%2 == 0 {
					logger.Infof("message from worker %d", id)
				} else {
					logger.SetLogLevel(LogLevel((i + id) % 5))
				}
			}
		}(w)
	}
	wg.Wait()
}

// BenchmarkLoggingWithLargeFields benchmarks logging with large field values
func BenchmarkLoggingWithLargeFields(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	largeValue := strings.Repeat("large-field-value-", 100) // ~2KB value

	fields := map[string]interface{}{
		"normal_field": "normal",
		"large_field":  largeValue,
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.InfoWithFields(fields, "message with large field values")
	}
}

// BenchmarkLoggingWithComplexFields benchmarks logging with complex field types
func BenchmarkLoggingWithComplexFields(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	type User struct {
		ID       int
		Name     string
		Email    string
		IsActive bool
	}

	fields := map[string]interface{}{
		"user": User{
			ID:       123,
			Name:     "John Doe",
			Email:    "john@example.com",
			IsActive: true,
		},
		"permissions": []string{"read", "write", "execute"},
		"metadata": map[string]interface{}{
			"created_at": time.Now(),
			"updated_at": time.Now(),
		},
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.InfoWithFields(fields, "message with complex fields")
	}
}

// BenchmarkLoggingWithCustomErrorHandler benchmarks logging with custom error handler
func BenchmarkLoggingWithCustomErrorHandler(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{&faultyWriter{failEvery: 2}} // Fails every other write
	config.ErrorHandler = func(err error) {
		// Custom error handler
	}
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		logger.Info("message that may trigger error handler")
	}
}

// BenchmarkTimeBasedRotation benchmarks time-based rotation
func BenchmarkTimeBasedRotation(b *testing.B) {
	dir := "bench_time_rotate"
	os.RemoveAll(dir)
	defer os.RemoveAll(dir)

	config := DefaultConfig()
	config.LogsDir = dir
	config.RotationTime = time.Millisecond * 10 // Very frequent rotation

	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer func() {
		// Ensure we don't deadlock on close
		done := make(chan struct{})
		go func() {
			logger.Close()
			close(done)
		}()

		select {
		case <-done:
		case <-time.After(5 * time.Second):
			b.Log("Warning: logger close timed out")
		}
	}()

	// Run fewer iterations if needed by adjusting the loop
	maxIterations := 1000
	if b.N > maxIterations {
		// Keep original b.N but only run up to maxIterations
		iterations := maxIterations
		b.ResetTimer()
		for i := 0; i < iterations; i++ {
			logger.Info("time-based rotation message")
		}
		b.StopTimer()
	} else {
		// Run normal benchmark
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			logger.Info("time-based rotation message")
		}
	}
}

// BenchmarkMixedOperations benchmarks mixed logging operations
func BenchmarkMixedOperations(b *testing.B) {
	config := DefaultConfig()
	config.Outputs = []io.Writer{io.Discard}
	config.BufferSize = 1000
	config.AsyncWorkers = 4
	logger, err := NewGourdianLogger(config)
	if err != nil {
		b.Fatal(err)
	}
	defer logger.Close()

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		count := 0
		for pb.Next() {
			count++

			// Create a new map for each iteration to avoid concurrent access
			fields := map[string]interface{}{
				"goroutine": count % 10,
				"iteration": count,
			}

			switch count % 5 {
			case 0:
				logger.Debugf("debug message %d", count)
			case 1:
				logger.Infof("info message %d", count)
			case 2:
				logger.WarnWithFields(fields, "warning message")
			case 3:
				logger.Errorf("error message %d", count)
			case 4:
				logger.InfoWithFields(fields, "structured info")
			}
		}
	})
	b.StopTimer()
	logger.Flush()
}

func BenchmarkWithSharedData(b *testing.B) {
	var sharedMap sync.Map

	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			sharedMap.Store("key", "value") // Thread-safe operation
		}
	})
}
