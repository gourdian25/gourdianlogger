name: gourdianlogger_release

on:
  push:
    tags:
      - "v*.*.*"

env:
  GO_VERSION: '1.24'
  APP_NAME: gourdianlogger
  BUILD_DIR: ./builds
  LINT_TIMEOUT: 5m

jobs:
  lint:
    name: Lint and Vet
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ./.cache
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go mod tidy
          go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2

      - name: Run golangci-lint
        run: golangci-lint run --timeout ${{ env.LINT_TIMEOUT }} ./...

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ./.cache
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests with coverage
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          go test -v -coverprofile=${{ env.BUILD_DIR }}/coverage.out ./...


  release:
    name: Create Release
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean --release-notes <(git tag -l --format='%(contents)' "${{ github.ref_name }}")
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Verify release assets
        run: |
          gh release view ${{ github.ref_name }} --json assets --jq '.assets[].name' | while read asset; do
            echo "âœ… Released asset: $asset"
          done